{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","rows","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","setalert","message","setTimeout","abouttext","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bdf589fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    return (\r\n        props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong> {props.alert.msg}\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode === \"light\"? \"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\ntitle: PropTypes.string.isRequired,\r\nabouttext: PropTypes.string.isRequired\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick =()=>{\r\n        // console.log(\"handleUpclick was clicked!\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\")\r\n    }\r\n    const onHandleChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const clearText = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared!\",\"success\")\r\n    }\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value); \r\n        props.showAlert(\"Text has been Copied!\",\"success\")\r\n    }\r\n    const handleExtraSpaces =()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\")\r\n    }\r\n    const[text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div>\r\n            <div className=\"container\" style={{color: props.mode === \"dark\"? \"white\":\"black\"}}>\r\n                <h1 className=\"mb-4\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} id=\"myBox\" rows=\"8\" onChange={onHandleChange} style={{backgroundColor : props.mode === \"dark\"? \"gray\":\"white\", color: props.mode === \"dark\"? \"white\":\"black\"}}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={clearText}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                </div>\r\n                <div className=\"container\" style={{color: props.mode === \"dark\"? \"white\" : \"black\"}}>\r\n                    <h2 className=\"mt-3\">Your Text Summary</h2>\r\n                    <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n                    <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                    <h2>Preview</h2>\r\n                    <p>{text.length>0?text:\"Enter something in to the textbox above to  preview here!\"}</p>\r\n                </div>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //shows wheter dark mode is enabled or not\n  const [alert, setalert] = useState(null)// Alert state\n  const showAlert =(message, type)=>{\n    setalert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(\"null\")\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\")\n      document.body.style.backgroundColor = \"#042743\"\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    }else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n  \n \n    <>\n  <Navbar title=\"TextUtils\" abouttext=\"About TextUtils\"  mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert} />\n\n            \n\n  <div className=\"container my-4\">\n  <TextForm showAlert={showAlert} heading=\"Enter the text to anylize below\" mode={mode}/>\n  </div>\n  </>\n \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}